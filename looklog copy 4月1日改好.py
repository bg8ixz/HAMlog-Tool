# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'looklog.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os, re, sqlite3, logging
from datetime import datetime, timedelta
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QRadioButton, QTableView, QHeaderView, QStyledItemDelegate
from PyQt5.QtCore import Qt, QTimer, QDate, QTime, QDateTime, QLocale, QRegExp, QAbstractTableModel, QModelIndex
from PyQt5.QtGui import QStandardItemModel, QStandardItem, QValidator


class Ui_looklog_Form(object):
    def setupUi(self, looklog_Form):
        looklog_Form.setObjectName("looklog_Form")
        looklog_Form.resize(1298, 538)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        looklog_Form.setFont(font)
        self.suoyoulog_tableView = QtWidgets.QTableView(looklog_Form)
        self.suoyoulog_tableView.setGeometry(QtCore.QRect(20, 100, 1261, 421))
        self.suoyoulog_tableView.setObjectName("suoyoulog_tableView")
        self.groupBox = QtWidgets.QGroupBox(looklog_Form)
        self.groupBox.setGeometry(QtCore.QRect(20, 10, 491, 80))
        self.groupBox.setObjectName("groupBox")
        self.today_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.today_xuanze_Button.setGeometry(QtCore.QRect(75, 20, 65, 16))
        self.today_xuanze_Button.setObjectName("today_xuanze_Button")
        self.day3_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.day3_xuanze_Button.setGeometry(QtCore.QRect(140, 20, 65, 16))
        self.day3_xuanze_Button.setObjectName("day3_xuanze_Button")
        self.day7_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.day7_xuanze_Button.setGeometry(QtCore.QRect(210, 20, 65, 16))
        self.day7_xuanze_Button.setObjectName("day7_xuanze_Button")
        self.day30_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.day30_xuanze_Button.setGeometry(QtCore.QRect(282, 20, 65, 16))
        self.day30_xuanze_Button.setObjectName("day30_xuanze_Button")
        self.zidingyi_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.zidingyi_xuanze_Button.setGeometry(QtCore.QRect(10, 52, 70, 16))
        self.zidingyi_xuanze_Button.setObjectName("zidingyi_xuanze_Button")
        self.kaishi_dateTimeEdit = QtWidgets.QDateTimeEdit(self.groupBox)
        self.kaishi_dateTimeEdit.setGeometry(QtCore.QRect(80, 46, 160, 22))
        self.kaishi_dateTimeEdit.setCalendarPopup(True)
        self.kaishi_dateTimeEdit.setTimeSpec(QtCore.Qt.LocalTime)
        self.kaishi_dateTimeEdit.setObjectName("kaishi_dateTimeEdit")
        self.lianjiefu_label = QtWidgets.QLabel(self.groupBox)
        self.lianjiefu_label.setGeometry(QtCore.QRect(246, 42, 16, 30))
        self.lianjiefu_label.setObjectName("lianjiefu_label")
        self.jiezhi_dateTimeEdit = QtWidgets.QDateTimeEdit(self.groupBox)
        self.jiezhi_dateTimeEdit.setGeometry(QtCore.QRect(260, 46, 160, 22))
        self.jiezhi_dateTimeEdit.setCalendarPopup(True)
        self.jiezhi_dateTimeEdit.setTimeSpec(QtCore.Qt.LocalTime)
        self.jiezhi_dateTimeEdit.setObjectName("jiezhi_dateTimeEdit")
        self.day90_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.day90_xuanze_Button.setGeometry(QtCore.QRect(360, 20, 65, 16))
        self.day90_xuanze_Button.setObjectName("day90_xuanze_Button")
        self.all_xuanze_Button = QtWidgets.QRadioButton(self.groupBox)
        self.all_xuanze_Button.setGeometry(QtCore.QRect(10, 20, 51, 16))
        self.all_xuanze_Button.setObjectName("all_xuanze_Button")
        self.shaixuan_pushButton = QtWidgets.QPushButton(self.groupBox)
        self.shaixuan_pushButton.setGeometry(QtCore.QRect(430, 19, 50, 50))
        self.shaixuan_pushButton.setObjectName("shaixuan_pushButton")
        self.groupBox_2 = QtWidgets.QGroupBox(looklog_Form)
        self.groupBox_2.setGeometry(QtCore.QRect(1010, 10, 191, 80))
        self.groupBox_2.setObjectName("groupBox_2")
        self.clearlog_pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.clearlog_pushButton.setGeometry(QtCore.QRect(15, 29, 75, 30))
        self.clearlog_pushButton.setObjectName("clearlog_pushButton")
        self.tolog_pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.tolog_pushButton.setGeometry(QtCore.QRect(103, 29, 75, 30))
        self.tolog_pushButton.setObjectName("tolog_pushButton")
        self.groupBox_3 = QtWidgets.QGroupBox(looklog_Form)
        self.groupBox_3.setGeometry(QtCore.QRect(520, 10, 261, 80))
        self.groupBox_3.setObjectName("groupBox_3")
        self.shaixuan_label = QtWidgets.QLabel(self.groupBox_3)
        self.shaixuan_label.setGeometry(QtCore.QRect(10, 40, 81, 30))
        self.shaixuan_label.setObjectName("shaixuan_label")
        self.hejitonglian_label = QtWidgets.QLabel(self.groupBox_3)
        self.hejitonglian_label.setGeometry(QtCore.QRect(92, 27, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.hejitonglian_label.setFont(font)
        self.hejitonglian_label.setAlignment(QtCore.Qt.AlignCenter)
        self.hejitonglian_label.setObjectName("hejitonglian_label")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(190, 40, 54, 30))
        self.label_3.setObjectName("label_3")
        self.groupBox_4 = QtWidgets.QGroupBox(looklog_Form)
        self.groupBox_4.setGeometry(QtCore.QRect(790, 10, 211, 80))
        self.groupBox_4.setObjectName("groupBox_4")
        self.search_callsign_lineEdit = QtWidgets.QLineEdit(self.groupBox_4)
        self.search_callsign_lineEdit.setGeometry(QtCore.QRect(80, 20, 121, 22))
        self.search_callsign_lineEdit.setObjectName("search_callsign_lineEdit")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(10, 20, 61, 30))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(30, 50, 61, 30))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_4)
        self.label_6.setGeometry(QtCore.QRect(160, 50, 31, 30))
        self.label_6.setObjectName("label_6")
        self.zonggongtonglian_label = QtWidgets.QLabel(self.groupBox_4)
        self.zonggongtonglian_label.setGeometry(QtCore.QRect(95, 46, 60, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.zonggongtonglian_label.setFont(font)
        self.zonggongtonglian_label.setAlignment(QtCore.Qt.AlignCenter)
        self.zonggongtonglian_label.setObjectName("zonggongtonglian_label")

        self.retranslateUi(looklog_Form)
        QtCore.QMetaObject.connectSlotsByName(looklog_Form)

    def retranslateUi(self, looklog_Form):
        _translate = QtCore.QCoreApplication.translate
        looklog_Form.setWindowTitle(_translate("looklog_Form", "通联日志记录"))
        self.groupBox.setTitle(_translate("looklog_Form", "时间范围"))
        self.today_xuanze_Button.setText(_translate("looklog_Form", "今天"))
        self.day3_xuanze_Button.setText(_translate("looklog_Form", "近3天"))
        self.day7_xuanze_Button.setText(_translate("looklog_Form", "近7天"))
        self.day30_xuanze_Button.setText(_translate("looklog_Form", "近30天"))
        self.zidingyi_xuanze_Button.setText(_translate("looklog_Form", "自定义"))
        self.kaishi_dateTimeEdit.setDisplayFormat(_translate("looklog_Form", "yyyy-M-d HH:mm:ss"))
        self.lianjiefu_label.setText(_translate("looklog_Form", "-"))
        self.jiezhi_dateTimeEdit.setDisplayFormat(_translate("looklog_Form", "yyyy-M-d HH:mm:ss"))
        self.day90_xuanze_Button.setText(_translate("looklog_Form", "近90天"))
        self.all_xuanze_Button.setText(_translate("looklog_Form", "全部"))
        self.shaixuan_pushButton.setText(_translate("looklog_Form", "筛选"))
        self.groupBox_2.setTitle(_translate("looklog_Form", "控制台"))
        self.clearlog_pushButton.setText(_translate("looklog_Form", "清空日志"))
        self.tolog_pushButton.setText(_translate("looklog_Form", "导出日志"))
        self.groupBox_3.setTitle(_translate("looklog_Form", "统计信息"))
        self.shaixuan_label.setText(_translate("looklog_Form", "已累计通联："))
        self.hejitonglian_label.setText(_translate("looklog_Form", "0"))
        self.label_3.setText(_translate("looklog_Form", "位友台"))
        self.groupBox_4.setTitle(_translate("looklog_Form", "通联查询"))
        self.search_callsign_lineEdit.setPlaceholderText(_translate("looklog_Form", "输入要查询的呼号"))
        self.label_4.setText(_translate("looklog_Form", "查询呼号："))
        self.label_5.setText(_translate("looklog_Form", "总计通联："))
        self.label_6.setText(_translate("looklog_Form", "次"))
        self.zonggongtonglian_label.setText(_translate("looklog_Form", "0"))

class CenterAlignedItemDelegate(QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super().initStyleOption(option, index)
        option.displayAlignment = Qt.AlignCenter

class LooklogWindow(QMainWindow):
    def __init__(self):
        super(LooklogWindow, self).__init__()
        self.ui = Ui_looklog_Form()
        self.ui.setupUi(self)
        # 设置日志等级为DEBUG
        logging.basicConfig(level=logging.DEBUG)
        # ------------------------------------------------------------------------- 连接到数据库
        # 获取当前程序路径（推荐使用os.path.abspath(__file__)）
        script_dir = os.path.dirname(os.path.abspath(__file__))
        db_path = os.path.join(script_dir, 'rx_log.db')

        # 连接到SQLite数据库
        self.conn = sqlite3.connect(db_path)  # 使用获取到的数据库路径

        # 获取游标对象
        self.cursor = self.conn.cursor()
        
        # -------------------------------------------------------------------自定义时间范围开始
        # 初始化时禁用自定义日期时间范围的编辑器
        self.ui.kaishi_dateTimeEdit.setReadOnly(True)
        self.ui.jiezhi_dateTimeEdit.setReadOnly(True)
        self.ui.shaixuan_pushButton.setEnabled(False)   #禁用筛选按钮
        # 初始化时设置自定义日期时间范围的编辑器文字为灰色
        self.ui.kaishi_dateTimeEdit.setStyleSheet("color: gray;")
        self.ui.jiezhi_dateTimeEdit.setStyleSheet("color: gray;")

        # 设置自定义日期时间范围的编辑器显示格式
        display_format = "yyyy-MM-dd HH:mm:ss"
        self.ui.kaishi_dateTimeEdit.setDisplayFormat(display_format)  # 设置开始日期时间编辑器的显示格式
        self.ui.jiezhi_dateTimeEdit.setDisplayFormat(display_format)  # 设置结束日期时间编辑器的显示格式

        # 设置自定义日期时间范围的编辑器默认显示今天的日期
        today = datetime.now()
        # today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)  # 获取当前日期，时分秒设为0
        # self.ui.kaishi_dateTimeEdit.setDateTime(today)  # 设置开始日期时间编辑器的日期时间为今天
        self.ui.kaishi_dateTimeEdit.setDateTime(today.replace(hour=0, minute=0, second=0, microsecond=0))  # 设置开始日期时间编辑器为今天凌晨
        self.ui.jiezhi_dateTimeEdit.setDateTime(today)  # 设置结束日期时间编辑器的日期时间为今天

        # 设置自定义日期时间范围的编辑器禁止选择今天之后的日期
        self.ui.kaishi_dateTimeEdit.setMaximumDateTime(today)  # 设置最大可选日期为今天
        self.ui.jiezhi_dateTimeEdit.setMaximumDateTime(today)
        # 可能的其他初始化代码...------------------------------------------------------------------------------------------------------------------------------
        # 为所有日期范围选择按钮绑定log_xuanze_Button槽函数-确保按钮点击有效
        self.ui.all_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        self.ui.today_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        self.ui.day3_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        self.ui.day7_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        self.ui.day30_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        self.ui.day90_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        self.ui.zidingyi_xuanze_Button.toggled.connect(self.log_xuanze_Button)
        # 将shaixuan_pushButton的clicked信号连接到log_xuanze_Button方法
        self.ui.shaixuan_pushButton.clicked.connect(self.log_xuanze_Button)
        
        self.initialize_table_view()    # 初始化表格视图
        self.update_table_view()  # 添加这一行，加载所有加载初始数据
        # ----------------------------------------------下面是 开局就统计统计功能-----------------------------
        # 统计rx_callsign非空且不重复的呼号数量
        self.cursor.execute("SELECT COUNT(DISTINCT rx_callsign) FROM rx_log WHERE rx_callsign IS NOT NULL")
        total_callsigns = self.cursor.fetchone()[0]  # 获取计数结果
        self.ui.hejitonglian_label.setText(f"{total_callsigns}")        # 设置hejitonglian_label的文本为统计结果

        # 创建定时刷新
        self.timer = QTimer(interval=2000, timeout=self.refresh_data)
        self.timer.start()

        self.ui.all_xuanze_Button.setChecked(True)  # 默认选中全部按钮
        self.setFixedSize(self.size())  # 设置窗口固定大小，不允许调整，或者指定固定的宽度和高度，例如：self.setFixedSize(400, 300)

        #-----------------------------------------------------------------------------------------------------初始化代码结束
    def initialize_table_view(self):
        # 查询数据库表rx_log的实际列名
        self.cursor.execute("PRAGMA table_info(rx_log)")
        self.columns = [row[1] for row in self.cursor.fetchall()]

        # 初始化数据模型(为了后面绑定表头)
        model = QStandardItemModel()
        # 定义期望的表头映射
        header_mapping = {
            'date': '日期',
            'time': '时间',
            'sn': '通联序号',
            'rx_callsign': '呼号',
            'rx_signal': '对方信号',
            'tx_signal': '我方信号',
            'qth': 'QTH',
            'rig': '使用设备',
            'power': '功率',
            'for_info': '通联方式(频率)',
            'op': '操作员',
        }

        # 根据实际列名和映射关系生成新的表头
        new_header_labels = [header_mapping.get(col, col) for col in self.columns]
        model.setHorizontalHeaderLabels(new_header_labels)
        # 将数据模型绑定到表格视图
        self.ui.suoyoulog_tableView.setModel(model)

        # 隐藏指定列
        hidden_columns = [self.columns.index('id'), self.columns.index('date_time')]  # 需要隐藏的列索引（对应id和date_time列）
        for column_index in hidden_columns:
            self.ui.suoyoulog_tableView.setColumnHidden(column_index, True)

        # 创建一个居中对齐的代理
        center_delegate = CenterAlignedItemDelegate()
        # 为表格视图中的所有列设置居中对齐的代理
        for column in range(model.columnCount()):
            self.ui.suoyoulog_tableView.setItemDelegateForColumn(column, center_delegate)


    def update_table_view(self, query=None):  # 修改：添加可选的查询参数query，默认为None
        # 如果query未提供，则使用默认查询语句（查询所有数据）
        if query is None:
            query = "SELECT * FROM rx_log ORDER BY date_time DESC"

        # 使用传入的查询语句执行查询
        self.cursor.execute(query)
        rows = self.cursor.fetchall()
        # 获取已绑定的数据模型
        model = self.ui.suoyoulog_tableView.model()

        # 清空模型现有数据
        model.removeRows(0, model.rowCount())
        #-----------------------下面是默认显示数据表功能-------------------------------------

        # 将查询结果转换为模型项并添加到模型中
        for row in rows:
            items = [QtGui.QStandardItem(str(v)) for v in row]
            model.appendRow(items)
        # 设置表格视图的模型 保留意见 看是否运行正常-------------------------------------------------------------------
        # self.ui.suoyoulog_tableView.setModel(model)
        # 隐藏指定列
        hidden_columns = [self.columns.index('id'), self.columns.index('date_time')]  # 需要隐藏的列索引（对应id和date_time列）
        for column_index in hidden_columns:
            self.ui.suoyoulog_tableView.setColumnHidden(column_index, True)
        # 设置表格视图的列宽自适应
        self.ui.suoyoulog_tableView.resizeColumnsToContents()
        # 调整列宽，使每列比自适应宽度大5像素
        for column in range(model.columnCount()):
            width = self.ui.suoyoulog_tableView.columnWidth(column) + 20
            self.ui.suoyoulog_tableView.setColumnWidth(column, width)

    def log_xuanze_Button(self):
        # 获取当前被选中的RadioButton
        selected_button = self.sender()
        # 以下代码隐藏 因为会出筛选按钮只能点一次的BUG
        '''# 如果不是自定义日期范围按钮，禁用相关控件
        if selected_button != self.ui.zidingyi_xuanze_Button:
            self.ui.kaishi_dateTimeEdit.setReadOnly(True)
            self.ui.jiezhi_dateTimeEdit.setReadOnly(True)
            self.ui.shaixuan_pushButton.setEnabled(False)
            self.ui.kaishi_dateTimeEdit.setStyleSheet("color: gray;") #改为灰色
            self.ui.jiezhi_dateTimeEdit.setStyleSheet("color: gray;")   #改为灰色
        else:  # 非自定义日期范围按钮，禁用相关控件并设置为灰色
            query = "SELECT * FROM rx_log ORDER BY date_time DESC"
            self.ui.kaishi_dateTimeEdit.setReadOnly(False)
            self.ui.jiezhi_dateTimeEdit.setReadOnly(False)
            self.ui.shaixuan_pushButton.setEnabled(True)
            self.ui.kaishi_dateTimeEdit.setStyleSheet("")  # 清除样式，恢复默认颜色
            self.ui.jiezhi_dateTimeEdit.setStyleSheet("")  # 清除样式，恢复默认颜色'''

        # 如果不是自定义日期范围按钮，禁用相关控件并设置为灰色
        if selected_button not in [self.ui.zidingyi_xuanze_Button, self.ui.shaixuan_pushButton]:
            self.ui.kaishi_dateTimeEdit.setReadOnly(True)
            self.ui.jiezhi_dateTimeEdit.setReadOnly(True)
            self.ui.shaixuan_pushButton.setEnabled(False)
            self.ui.kaishi_dateTimeEdit.setStyleSheet("color: gray;")  # 改为灰色
            self.ui.jiezhi_dateTimeEdit.setStyleSheet("color: gray;")   # 改为灰色
        else:  # 自定义日期范围按钮或筛选按钮被选中
            # 给query赋予一个默认值（选择所有数据的查询语句）
            query = "SELECT * FROM rx_log ORDER BY date_time DESC"
            self.ui.kaishi_dateTimeEdit.setReadOnly(False)
            self.ui.jiezhi_dateTimeEdit.setReadOnly(False)
            self.ui.shaixuan_pushButton.setEnabled(True)
            self.ui.kaishi_dateTimeEdit.setStyleSheet("")  # 清除样式，恢复默认颜色
            self.ui.jiezhi_dateTimeEdit.setStyleSheet("")  # 清除样式，恢复默认颜色


        # 处理不同按钮的选择
        if selected_button == self.ui.all_xuanze_Button:
            # 选择全部，恢复默认显示
            query = "SELECT * FROM rx_log ORDER BY date_time DESC"
            self.ui.shaixuan_label.setText("已累计通联：")
            hejitonglian_query = "SELECT COUNT(DISTINCT rx_callsign) FROM rx_log WHERE rx_callsign IS NOT NULL"
            hejitonglian_count = self.execute_query(hejitonglian_query)[0][0]
            self.ui.hejitonglian_label.setText(f"{hejitonglian_count}")
        elif selected_button == self.ui.today_xuanze_Button:
            # 选择今天
            today = datetime.now().strftime('%Y-%m-%d')
            query = f"SELECT * FROM rx_log WHERE date_time LIKE '{today}%' ORDER BY date_time DESC"
            self.ui.shaixuan_label.setText("今日已通联：")
            hejitonglian_query = f"SELECT COUNT(DISTINCT rx_callsign) FROM rx_log WHERE date_time LIKE '{today}%'"
            hejitonglian_count = self.execute_query(hejitonglian_query)[0][0]
            self.ui.hejitonglian_label.setText(f"{hejitonglian_count}")
        elif selected_button in [self.ui.day3_xuanze_Button, self.ui.day7_xuanze_Button, self.ui.day30_xuanze_Button, self.ui.day90_xuanze_Button]:
            # 选择近3天、近7天、近30天、近90天
            match = re.search(r'day(\d+)_xuanze_Button', selected_button.objectName())
            if match:
                period = match.group(1)
            else:
                raise ValueError("Invalid objectName format")

            end_date = datetime.now()  # 包含今天，将今天作为结束日期
            start_date = end_date - timedelta(days=int(period) + 1)  # 计算开始日期，不包含今天，加1天以包含今天

            # 将开始日期和结束日期转换为字符串，以匹配数据库中date_time字段的格式
            start_date_str = start_date.strftime('%Y-%m-%d %H:%M:%S')
            end_date_str = end_date.strftime('%Y-%m-%d %H:%M:%S')

            query = f"SELECT * FROM rx_log WHERE STRFTIME('%Y-%m-%d %H:%M:%S', date_time) BETWEEN '{start_date_str}' AND '{end_date_str}' ORDER BY date_time DESC"
            self.ui.shaixuan_label.setText(f"近{period}天通联：")
            hejitonglian_query = f"SELECT COUNT(DISTINCT rx_callsign) FROM rx_log WHERE STRFTIME('%Y-%m-%d %H:%M:%S', date_time) BETWEEN '{start_date_str}' AND '{end_date_str}'"
            hejitonglian_count = self.execute_query(hejitonglian_query)[0][0]
            self.ui.hejitonglian_label.setText(f"{hejitonglian_count}")
            # 下列代码隐藏 因为会出筛选按钮只能点一次的BUG
            '''elif selected_button == self.ui.zidingyi_xuanze_Button:
            # 自定义日期范围，解除控件禁用状态
            self.ui.kaishi_dateTimeEdit.setReadOnly(False)
            self.ui.jiezhi_dateTimeEdit.setReadOnly(False)
            self.ui.shaixuan_pushButton.setEnabled(True)
            # 给query赋予一个默认值（选择所有数据的查询语句）
            query = "SELECT * FROM rx_log ORDER BY date_time DESC"'''
            # 用户点击shaixuan_pushButton后执行以下逻辑
        elif selected_button == self.ui.shaixuan_pushButton:
            # 获取日期和时间部分
            start_date_str = self.ui.kaishi_dateTimeEdit.dateTime().date().toString("yyyy-MM-dd")
            start_time_str = self.ui.kaishi_dateTimeEdit.dateTime().time().toString("HH:mm:ss")

            end_date_str = self.ui.jiezhi_dateTimeEdit.dateTime().date().toString("yyyy-MM-dd")
            end_time_str = self.ui.jiezhi_dateTimeEdit.dateTime().time().toString("HH:mm:ss")
            # 拼接日期和时间部分
            start_datetime_str = f"{start_date_str} {start_time_str}"
            end_datetime_str = f"{end_date_str} {end_time_str}"

            # 打印出来一个判断 检查时间是否正确
            print(f"开始时间：{start_datetime_str}")
            print(f"结束时间：{end_datetime_str}")

            query = f"SELECT * FROM rx_log WHERE date_time BETWEEN '{start_datetime_str}' AND '{end_datetime_str}' ORDER BY date_time DESC"
            self.ui.shaixuan_label.setText("筛选出通联：")
            hejitonglian_query = f"SELECT COUNT(DISTINCT rx_callsign) FROM rx_log WHERE date_time BETWEEN '{start_datetime_str}' AND '{end_datetime_str}' AND rx_callsign IS NOT NULL"
            hejitonglian_count = self.execute_query(hejitonglian_query)[0][0]
            self.ui.hejitonglian_label.setText(f"{hejitonglian_count}")

            # 更新表格视图 放在这里会闪退
            # self.update_table_view(query)

        # 如果不是选择全部，暂停定时器5秒
        if selected_button != self.ui.all_xuanze_Button:
            self.timer.stop()

        # 更新表格视图
        self.update_table_view(query)
    # 统计总共通联数量 不重复
    def count_unique_callsigns(self):
        query = "SELECT COUNT(DISTINCT rx_callsign) FROM rx_log WHERE rx_callsign IS NOT NULL"
        self.cursor.execute(query)
        count = self.cursor.fetchone()[0]
        self.ui.hejitonglian_label.setText(f"{count}")

    def refresh_data(self):
        self.update_table_view()
        self.count_unique_callsigns()

    #没有这个会报错 就是正常循环
    def execute_query(self, query):
        self.cursor.execute(query)
        rows = self.cursor.fetchall()
        return rows













# 确保这个类被正确导出
__all__ = ['LooklogWindow']